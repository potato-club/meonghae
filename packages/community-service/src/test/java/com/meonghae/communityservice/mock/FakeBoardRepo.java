package com.meonghae.communityservice.mock;

import com.meonghae.communityservice.application.board.port.BoardRepository;
import com.meonghae.communityservice.domain.board.Board;
import com.meonghae.communityservice.domain.board.BoardType;
import com.meonghae.communityservice.infra.board.board.BoardEntity;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBoardRepo implements BoardRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);
    private final List<BoardEntity> data = new ArrayList<>();

    @Override
    public Optional<Board> findById(Long id) {
        return data.stream().filter(board -> board.getId().equals(id)).findAny().map(BoardEntity::toModel);
    }

    @Override
    public Slice<Board> findByType(BoardType type, Pageable pageable) {
        return null;
    }

    @Override
    public List<Board> findBoardListForMain(LocalDateTime now) {
        return null;
    }

    @Override
    public Board save(Board board) {
        if (board.getId() == null || board.getId() == 0) {
            BoardEntity saveBoard = BoardEntity.builder()
                    .title(board.getTitle())
                    .content(board.getContent())
                    .likes(board.getLikes())
                    .hasImage(board.getHasImage())
                    .email(board.getEmail())
                    .type(board.getType())
                    .id(autoGeneratedId.incrementAndGet())
                    .build();

            data.add(saveBoard);
            return saveBoard.toModel();
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), board.getId()));
            data.add(BoardEntity.fromModel(board));
            return board;
        }
    }

    @Override
    public void delete(Long id) {
        data.removeIf(item -> Objects.equals(item.getId(), id));
    }

    @Override
    public Board update(Board updateBoard) {
        if (updateBoard.getId() == null || updateBoard.getId() == 0) {
            BoardEntity saveBoard = BoardEntity.builder()
                    .title(updateBoard.getTitle())
                    .content(updateBoard.getContent())
                    .likes(updateBoard.getLikes())
                    .hasImage(updateBoard.getHasImage())
                    .email(updateBoard.getEmail())
                    .type(updateBoard.getType())
                    .id(autoGeneratedId.incrementAndGet())
                    .build();

            data.add(saveBoard);
            return saveBoard.toModel();
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), updateBoard.getId()));
            data.add(BoardEntity.fromModel(updateBoard));
            return updateBoard;
        }
    }
}
