package com.meonghae.communityservice.mock;

import com.meonghae.communityservice.application.review.port.ReviewRepository;
import com.meonghae.communityservice.domain.review.Review;
import com.meonghae.communityservice.domain.review.ReviewCatalog;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeReviewRepo implements ReviewRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<Review> data = new ArrayList<>();

    @Override
    public Optional<Review> findById(Long reviewId) {
        return data.stream().filter(item -> Objects.equals(item.getId(), reviewId)).findAny();
    }

    @Override
    public Slice<Review> findByCatalogAndKeywordAndSortType(Pageable pageable, ReviewCatalog catalog, String keyword) {
        return null;
    }

    @Override
    public Slice<Review> findByCatalogAndHasImageAndKeywordAndSortType(Pageable pageable, ReviewCatalog catalog, String keyword) {
        return null;
    }

    @Override
    public Review save(Review review) {
        LocalDateTime now = LocalDateTime.now();
        if (review.getId() == null || review.getId() == 0) {
            Review saveReview = Review.builder()
                    .title(review.getTitle())
                    .content(review.getContent())
                    .likes(review.getLikes())
                    .dislikes(review.getDislikes())
                    .rating(review.getRating())
                    .catalog(review.getCatalog())
                    .hasImage(review.getHasImage())
                    .createdDate(now)
                    .modifiedDate(now)
                    .email(review.getEmail())
                    .id(autoGeneratedId.incrementAndGet())
                    .build();

            data.add(saveReview);
            return saveReview;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), review.getId()));
            data.add(review);
            return review;
        }
    }

    @Override
    public void delete(Review review) {
        data.removeIf(item -> Objects.equals(item.getId(), review.getId()));
    }

    @Override
    public void updateReaction(Review review) {

    }
}
